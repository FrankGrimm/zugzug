{"name":"ZugZug","tagline":"Unfancy task queue built on Redis","body":"# Synopsis\r\n\r\n**ZugZug** is an unfancy task queue built on [Redis](http://redis.io).\r\n\r\n[![stability 2 - unstable](http://b.repl.ca/v1/stability-2_--_unstable-yellow.png)](http://nodejs.org/api/documentation.html#documentation_stability_index) [![license - MIT](http://b.repl.ca/v1/license-MIT-blue.png)](http://pluma.mit-license.org) [![Flattr this](https://api.flattr.com/button/flattr-badge-large.png)](https://flattr.com/submit/auto?user_id=pluma&url=https://github.com/pluma/zugzug)\r\n\r\n[![Build Status](https://travis-ci.org/pluma/zugzug.png?branch=master)](https://travis-ci.org/pluma/zugzug) [![Coverage Status](https://coveralls.io/repos/pluma/zugzug/badge.png?branch=master)](https://coveralls.io/r/pluma/zugzug?branch=master)\r\n\r\n[![NPM status](https://nodei.co/npm/zugzug.png?compact=true)](https://npmjs.org/package/zugzug)\r\n\r\n[![Dependencies](https://david-dm.org/pluma/zugzug.png?theme=shields.io)](https://david-dm.org/pluma/zugzug)\r\n\r\n# Why?\r\n\r\nBecause [Kue](https://github.com/LearnBoost/kue) does too much and bare [redis](https://github.com/mranney/node_redis) is too painful.\r\n\r\n# ZugZug?\r\n\r\n[Zug-zug](http://www.urbandictionary.com/define.php?term=zug-zug).\r\n\r\n# Install\r\n\r\n## Node.js\r\n\r\n### With NPM\r\n\r\n```sh\r\nnpm install zugzug\r\n```\r\n\r\n### From source\r\n\r\n```sh\r\ngit clone https://github.com/pluma/zugzug.git\r\ncd zugzug\r\nnpm install\r\nmake\r\n```\r\n\r\n# Usage example\r\n\r\n## Producer\r\n\r\n```javascript\r\nvar zz = require('zugzug')(); // use local Redis with default settings\r\nvar queue = zz.queue('example');\r\n\r\nsetInterval(function() {\r\n    // create a new job\r\n    var job = queue.createJob();\r\n    // throw some data in there\r\n    job.data = 'There is always more work to be done.';\r\n    // save it to the database\r\n    job.save().catch(function(err) {\r\n        console.log('Something is wrong with your database.');\r\n        console.error(err);\r\n    });\r\n}, 2000); // repeat every 2 seconds\r\n```\r\n\r\n## Consumer (Worker)\r\n\r\n```javascript\r\nvar zz = require('zugzug')();\r\nvar queue = zz.queue('example');\r\n\r\ndoForever(performJob);\r\n\r\nfunction doForever(work) {\r\n    return queue.next() // take a job from the queue\r\n        .then(work) // process the job\r\n        .then(function() {\r\n            return doForever(work); // rinse, repeat\r\n        });\r\n}\r\n\r\nfunction performJob(job) {\r\n    try {\r\n        doSomeWork(job); // do something with the job\r\n    } catch(err) {\r\n        // job failed. oh no!\r\n        console.log('job', job.id, 'failed!');\r\n        console.error(err);\r\n        return job.fail(err.message);\r\n        // but the job can still be re-enqueued later\r\n    }\r\n    // job is done! yay!\r\n    console.log('job', job.id, 'completed!');\r\n    return job.complete();\r\n}\r\n\r\nfunction doSomeWork(job) {\r\n    if (Math.random() > 0.5) {\r\n        // randomly throw an error here because why not\r\n        throw new Error(\"That's a nice program you have there...\");\r\n    }\r\n    // otherwise does stuff with the job's data\r\n    console.log(job.data);\r\n}\r\n```\r\n\r\n# API\r\n\r\nAll asynchronous methods in ZugZug return [bluebird](https://github.com/petkaantonov/bluebird) promises and accept node-style callbacks.\r\n\r\n## ZugZug\r\n\r\n### `new ZugZug([options:Object]):ZugZug`\r\n\r\nCreates a new `ZugZug` instance that connects to a Redis server with the given options.\r\n\r\nUse of the `new` keyword is optional.\r\n\r\nIn addition to the options accepted by [redis](https://github.com/mranney/node_redis#rediscreateclientport-host-options), ZugZug recognizes `port` and `server` and passes them on correctly.\r\n\r\nIf `options.prefix` is defined, all Redis keys will use that prefix. Defaults to `zugzug:`.\r\n\r\n### `zugzug.useDatabase(db:Number, [callback:Function]):Promise(self)`\r\n\r\nTells the underlying Redis connection to [use the database with the given number](http://redis.io/commands/SELECT). Resolves to the `ZugZug` instance itself on success or is rejected with the error returned by `redis` for the underlying `SELECT` command.\r\n\r\n### `zugzug.queue([name:String]):Queue`\r\n\r\nReturns a `Queue` instance representing the queue with the given `name`. Multiple invocations with the same `name` will return the same instance.\r\n\r\nIf `name` is not provided it is set to `\"default\"`.\r\n\r\n### `zugzug.getJob(id:String, [callback:Function]):Promise(Job)`\r\n\r\nRetrieves the job with the given `id` from the database. Resolves to a new `Job` instance representing the job on success or is rejected with the error returned by `redis` for the underlying `HGETALL` command.\r\n\r\nIf the job does not exist, resolves to `null` instead.\r\n\r\n### `zugzug.getJobLog(id:String, [callback:Function]):Promise(Object[])`\r\n\r\nRetrieves the log entries associated with the job with the given `id` from the database. Resolves to an array of log entry objects on success or is rejected with the error returned by `redis` for the underlying `LRANGE` command.\r\n\r\nIf the job does not exist, resolves to an empty array instead.\r\n\r\n### `zugzug.moveJob(id:String, toQueue:String, [callback:Function]):Promise(Boolean)`\r\n\r\nMoves the job with the given `id` to the queue `toQueue`. Resolves to `true` on success or is rejected with the error returned by `redis` for the underlying commands.\r\n\r\nIf the job does not exist, resolves to `false` instead.\r\n\r\n### `zugzug.resetJob(id:String, [callback:Function]):Promise(Boolean)`\r\n\r\nRe-enqueues the job with the given `id`. Resolves to `true` on success or is rejected with the error returned by `redis` for the underlying commands.\r\n\r\nThe job will change its state to `pending` regardless of its previous state.\r\n\r\nIf the job does not exist, resolves to `false` instead.\r\n\r\nIf you want to put a failed job back in the queue, this will let you do that.\r\n\r\nIf you want the failed job to be retried immediately, use [zugzug.startJob](#zugzugstartjobidstring-callbackfunctionpromisejob) instead.\r\n\r\n### `zugzug.startJob(id:String, [callback:Function]):Promise(Job)`\r\n\r\nRetrieves the job with the given `id` from the database. Resolves to a new `Job` instance representing the job on success or is rejected with the error returned by `redis` for the underlying commands.\r\n\r\nThe returned job will change its state to `progress` regardless of its previous state.\r\n\r\nIf the job does not exist, resolves to `null` instead.\r\n\r\nIf you want to restart a failed job in a worker script, this will let you do that.\r\n\r\nIf you only want the failed job to be re-enqueued, use [zugzug.resetJob](#zugzugresetjobidstring-callbackfunctionpromiseboolean) instead.\r\n\r\n### `zugzug.quit([callback:Function]):Promise(self)`\r\n\r\nTerminates the database connection cleanly. Resolves to the `ZugZug` instance itself or is rejected with the error returned by `redis` for the underlying `QUIT` command.\r\n\r\nNote that the Redis connection used by a `ZugZug` instance is shared by all queues and jobs associated with it.\r\n\r\nIt is probably a bad idea to call this method if [queue.next](#queuenexttimeoutnumber-callbackfunctionpromisejob) is still waiting for new jobs.\r\n\r\n## Queues\r\n\r\n### `queue.createJob([data:*, [maxFailures:Number]]):Job`\r\n\r\nReturns a new `Job` instance bound to this queue.\r\n\r\nSee [job.data](#jobdata).\r\n\r\nSee [job.maxFailures](#jobmaxfailuresnumber).\r\n\r\n### `queue.getInfo([callback:Function]):Promise(Object)`\r\n\r\nCollects statistics for the queue from the databases. Resolves to an object containing the statistical information on success or is rejected with the error returned by `redis` for the underlying commands.\r\n\r\nThe result object will contain a property `total` denoting the total number of jobs in the queue, as well as a property for each possible state denoting the number of jobs in the queue that are currently set to each respective state.\r\n\r\nSee [job.state](#jobstatestring-read-only).\r\n\r\n### `queue.next([timeout:Number], [callback:Function]):Promise(Job)`\r\n\r\nRetrieves the oldest `pending` job from the queue. Resolves to a new `Job` instance representing the job on success or is rejected with the error returned by `redis` for the underlying commands.\r\n\r\nThe returned job will change its state from `pending` to `progress`.\r\n\r\nIf the queue is currently empty, it will wait until a new job is added to the queue.\r\n\r\nIf a `timeout` is provided, it will resolve to `null` if no job is found in the queue before the given number of seconds has elapsed.\r\n\r\nIf you want to use ZugZug in a worker script, this will likely be how you want to fetch new jobs from the queue.\r\n\r\n### `queue.delete([callback:Function]):Promise(self)`\r\n\r\nDeletes the queue and all associated jobs from the database. Resolves to the `Queue` instance itself on success or is rejected with the error returned by `redis` for the underlying commands.\r\n\r\nThis will also remove the queue from the associated `ZugZug` instance's queue cache, so calling `zugzug.queue(queue.name)` will return a new `Queue` object.\r\n\r\n## Jobs\r\n\r\n### `job.id:String` (read-only)\r\n\r\nThe unique ID of the job which can be used to re-load the job with [zugzug.getJob](#zugzuggetjobidstring-callbackfunctionpromisejob). This property is only defined if the job has been saved to the database.\r\n\r\n### `job.data:*`\r\n\r\nThe job's user-defined data. Will be serialized to JSON for storage in Redis, so you may want to avoid relying on non-serializable objects. Defaults to an empty object.\r\n\r\n### `job.queue:String` (read-only)\r\n\r\nThe name of the queue this job is bound to. If you want to move a job to a different queue, use [zugzug.moveJob(id, name)](#zugzugmovejobidstring-toqueuestring-callbackfunctionpromiseboolean).\r\n\r\n### `job.state:String` (read-only)\r\n\r\nThe current state of the job. This property is only defined if the job has been saved to the database.\r\n\r\n#### `pending`\r\n\r\nThe job has been added to the queue and is waiting to be picked up by a worker.\r\n\r\n#### `progress`\r\n\r\nThe job has been picked up by a worker and is currently being worked on.\r\n\r\n#### `error`\r\n\r\nThe job has failed too many times.\r\n\r\nSee [job.fail](#jobfaildetails-callbackfunctionpromiseself).\r\n\r\n#### `done`\r\n\r\nThe job has been completed successfully.\r\n\r\n### `job.progress:Number` (read-only)\r\n\r\nThe progress of this job at the time of the most recent update. This value will be set to `0` whenever the job is (re-)started.\r\n\r\n### `job.failures:Number` (read-only)\r\n\r\nThe number of times that this job has failed.\r\n\r\nSee [job.fail](#jobfaildetails-callbackfunctionpromiseself).\r\n\r\n### `job.maxFailures:Number`\r\n\r\nThe maximum number of times the job is allowed to fail before it will no longer be tried again. Defaults to `1`.\r\n\r\nSee [job.fail](#jobfaildetails-callbackfunctionpromiseself).\r\n\r\n### `job.created:Date` (read-only)\r\n\r\nThe `Date` at which the job was first saved to the database. Will be set automatically on the first call to `save` or when the job is loaded from the database.\r\n\r\n### `job.updated:Date` (read-only)\r\n\r\nThe `Date` at which the job was last saved to the database. Will be updated automatically for every operation that modifies the job in the database (including `job.log`).\r\n\r\n### `job.save([callback:Function]):Promise(self)`\r\n\r\nSaves the job to the database. Resolves to the `Job` instance itself on success or is rejected with the error returned by `redis` for the underlying commands.\r\n\r\nIf the job did not exist in the database before, it will be assigned [a unique ID](#jobidstring-read-only) and its [state](#jobstatestring-read-only) will be set to [pending](#pending).\r\n\r\n### `job.update(progress:Number, [message:String], [callback:Function]):Promise(self)`\r\n\r\nUpdates the [job's progress](#jobprogressnumber-read-only) to the given `progress`. Resolves to the `Job` instance itself on success or is rejected with the error returned by `redis` for the underlying commands.\r\n\r\nThe `progress` should be a value between `0.0` and `1.0`.\r\n\r\nIf `message` is provided, a matching log entry will be created.\r\n\r\n### `job.log(message:String, [details:*], [callback:Function]):Promise(self)`\r\n\r\nLogs the given `message` to the job's log with the current timestamp. Resolves to the `Job` instance itself on success or is rejected with the error returned by `redis` for the underlying commands.\r\n\r\nIf `details` is provided, it will be serialized to JSON and stored on the log message.\r\n\r\n### `job.start([callback:Function]):Promise(self)`\r\n\r\nSets the job's state to `progress` and creates a log entry. Resolves to the `Job` instance itself on success or is rejected with the error returned by `redis` for the underlying commands.\r\n\r\n### `job.complete([callback:Function]):Promise(self)`\r\n\r\nSets the job's state to `done` and creates a log entry indicating success. Resolves to the `Job` instance itself on success or is rejected with the error returned by `redis` for the underlying commands.\r\n\r\n### `job.fail([details:*], [callback:Function]):Promise(self)`\r\n\r\nIncrements the [job's number of failures](#jobfailuresnumber-read-only) and creates a log entry indicating failure. Resolves to the `Job` instance itself on success or is rejected with the error returned by `redis` for the underlying commands.\r\n\r\nIf `failures` is lower than the job's `maxFailures` or `maxFailures` is set to `0`, the job's state will be reset to `pending` and it will be re-enqueued automatically.\r\n\r\nIf `failures` is greater than or equal to the job's `maxFailures`, the job's state will be set to `error` and it will not be re-enqueued.\r\n\r\nIf `details` is provided, it will be serialized to JSON and stored on the log message.\r\n\r\n### `job.delete([callback:Function]):Promise(self)`\r\n\r\nDeletes the job from the database. Resolves to the `Job` instance itself on success or is rejected with the error returned by `redis` for the underlying commands.\r\n\r\n# License\r\n\r\nThe MIT/Expat license. For more information, see http://pluma.mit-license.org/ or the accompanying [LICENSE](https://github.com/pluma/zugzug/blob/master/LICENSE) file.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}